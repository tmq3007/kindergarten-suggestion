'use client';
import React, {Fragment, useEffect, useRef, useState} from 'react';
import logo from '@public/logo2-removebg-preview.png';
import {
    BellOutlined,
    HomeOutlined,
    LogoutOutlined,
    MenuFoldOutlined,
    MenuUnfoldOutlined,
    UsergroupAddOutlined,
    UserOutlined,
    WindowsOutlined,
} from '@ant-design/icons';
import {Button, ConfigProvider, Layout, Menu, message, Modal, Space, theme} from 'antd';
import Image from 'next/image';
import Link from 'next/link';
import {useLogoutMutation} from '@/redux/services/authApi';
import {forbidden, unauthorized, useRouter} from 'next/navigation';
import {useDispatch, useSelector} from 'react-redux';
import {RootState} from '@/redux/store';
import {ROLES} from '@/lib/constants';
import {resetUser} from '@/redux/features/userSlice';
import {Resizable} from 'react-resizable';
import 'react-resizable/css/styles.css'

export default function AdminLayout({children}: { children: React.ReactNode }) {
    const [messageApi, contextHolder] = message.useMessage();
    const [collapsed, setCollapsed] = useState(false);
    const {Header, Content, Sider} = Layout;
    const [isModalOpen, setIsModalOpen] = useState<boolean>(false);
    const router = useRouter();
    const [logout] = useLogoutMutation();
    const processed = useRef(false);
    const dispatch = useDispatch();
    const user = useSelector((state: RootState) => state.user);
    const role = user.role;

    if (!role) {
        unauthorized();
    }
    // Check role, but skip if logging out
    const isLoggingOut = useRef(false);
    useEffect(() => {
        if (role !== ROLES.ADMIN && !isLoggingOut.current) {
            forbidden();
        }
    }, [role]);

    const {
        token: {colorBgContainer, borderRadiusLG},
    } = theme.useToken();

    const handleLogout = async () => {

        messageApi.success("Logging out...")

        try {
            setIsModalOpen(false);
            isLoggingOut.current = true; // Mark as on logout process

            const result = await logout(undefined).unwrap();

            if (result?.code == 200 && !processed.current) {
                processed.current = true;

                // Perform the fetch and wait for it to complete
                await fetch('/api/logout', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                });
                dispatch(resetUser());
            }
        } catch (error) {
            console.error("Logout failed:", error);
            dispatch(resetUser());
        }
    };

    const [siderWidth, setSiderWidth] = useState(200); // Chiều rộng ban đầu
    const onResize = (event: any, {size}: { size: { width: number; height: number } }) => {
        setSiderWidth(size.width);
    };

    return (
        <Fragment>
            {contextHolder}
            <Layout hasSider>
                <ConfigProvider
                    theme={{
                        components: {
                            Layout: {},
                            Menu: {
                                iconSize: 20,
                            },
                        },
                    }}
                >

                    <Resizable
                        width={siderWidth}
                        height={Infinity}
                        onResize={onResize}
                        minConstraints={[200, Infinity]} // Chiều rộng tối thiểu
                        maxConstraints={[350, Infinity]} // Chiều rộng tối đa
                        handle={
                            <div
                                className="react-resizable-handle"
                                style={{
                                    width: '5px',
                                    height: '100%',
                                    background: 'transparent',
                                    position: 'absolute',
                                    right: 0,
                                    top: 0,
                                    cursor: 'ew-resize',
                                    zIndex: 1,
                                }}
                            />
                        }
                        className="hidden md:block"
                    >
                        <Sider width={siderWidth}
                               trigger={null}
                               collapsible
                               collapsed={collapsed}>
                            <Image className={'mx-auto'} src={logo} alt={'logo'} height={70} width={70}/>
                            <div className="demo-logo-vertical"/>
                            <Menu
                                theme="dark"
                                mode="inline"
                                defaultSelectedKeys={['1']}
                                items={[
                                    {
                                        key: '1',
                                        icon: <HomeOutlined/>,
                                        label: <Link href="/admin/management/school/school-list">School Management</Link>,
                                    },
                                    {
                                        key: '2',
                                        icon: <UserOutlined/>,
                                        label: <Link href="/admin/management/user/user-list">User Management</Link>,
                                    },
                                    {
                                        key: '3',
                                        icon: <BellOutlined/>,
                                        label: <Link href="/reminder">Reminder</Link>,
                                    },
                                    {
                                        key: '4',
                                        icon: <UsergroupAddOutlined/>,
                                        label: <Link href="/parent-management">Parent Management</Link>,
                                    },
                                    {
                                        key: '5',
                                        icon: <WindowsOutlined/>,
                                        label: <Link href="/request-management">Request Management</Link>,
                                    },
                                ]}
                            />
                        </Sider>
                    </Resizable>
                </ConfigProvider>
                <Layout>
                    <Header
                        className={'flex justify-between items-center px-2'}
                        style={{
                            position: 'sticky',
                            top: 0,
                            zIndex: 1000,
                            width: '100%',
                            background: colorBgContainer,
                        }}
                    >
                        <Button
                            className={'hidden md:block'}
                            type="text"
                            icon={collapsed ? <MenuUnfoldOutlined/> : <MenuFoldOutlined/>}
                            onClick={() => setCollapsed(!collapsed)}
                            style={{
                                fontSize: '16px',
                                width: 64,
                                height: 64,
                            }}
                        />
                        <Space className={'md:hidden flex justify-evenly w-full h-full'}>
                            <Link href="/admin/management/school/school-list">
                                <HomeOutlined/>
                            </Link>
                            <Link href="/user-management">
                                <UserOutlined/>
                            </Link>
                            <Link href="/reminder">
                                <BellOutlined/>
                            </Link>
                            <Link href="/parent-management">
                                <UsergroupAddOutlined/>
                            </Link>
                            <Link href="/request-management">
                                <WindowsOutlined/>
                            </Link>
                            <Link href="" onClick={() => setIsModalOpen(true)}>
                                <LogoutOutlined/>
                            </Link>
                        </Space>
                        <Link className="hidden md:block" href="">
                            <Button
                                type="text"
                                icon={<LogoutOutlined/>}
                                style={{
                                    fontSize: '16px',
                                    width: 'auto',
                                    height: 64,
                                    color: 'red',
                                }}
                                onClick={() => setIsModalOpen(true)}
                            >
                                Logout
                            </Button>
                        </Link>
                    </Header>
                    <Content
                        style={{
                            padding: 20,
                            minHeight: 280,
                        }}
                        className={'h-full'}
                    >
                        {children}
                    </Content>
                </Layout>
                <Modal
                    title="Are you leaving?"
                    open={isModalOpen}
                    onCancel={() => setIsModalOpen(false)}
                    footer={[
                        <Button key="cancel" onClick={() => setIsModalOpen(false)}>
                            Cancel
                        </Button>,
                        <Button key="logout" type="primary" danger onClick={handleLogout}>
                            Yes
                        </Button>,
                    ]}
                    getContainer={false}
                >
                    <p>Are you sure you want to logout? All your unsaved data will be lost.</p>
                </Modal>
            </Layout>
        </Fragment>
    );
}