'use client';
import React, { useEffect } from 'react';
import { Spin, Button, DatePicker, Form, Input, Select, Space, Breadcrumb, notification } from 'antd';
import { useRouter, useSearchParams } from 'next/navigation';
import Link from 'next/link';
import dayjs from 'dayjs';
import {useGetUserDetailQuery, useUpdateUserMutation} from "@/redux/services/userApi";

const formItemLayout = {
    labelCol: { sm: { span: 6 } },
    wrapperCol: { sm: { span: 14 } },
};

const UserDetail: React.FC = () => {
    const [form] = Form.useForm();
    const router = useRouter();
    const [api, contextHolder] = notification.useNotification();
    const searchParams = useSearchParams();
    const userId = searchParams.get('userId');

    //take user detail information to userData
    const { data: userData, isLoading, isError } = useGetUserDetailQuery(Number(userId), {
        skip: !userId,
    });

    const [updateUser, { isLoading: isUpdating }] = useUpdateUserMutation();

    const openNotificationWithIcon = (type: 'success' | 'error', message: string, description: string) => {
        api[type]({
            message,
            description,
            placement: 'topRight',
        });
    };

    useEffect(() => {
        if (userData?.data) {
            const user = userData.data;
            form.setFieldsValue({
                username: user.username,
                fullname: user.fullname,
                email: user.email,
                phoneNumber: user.phone,
                DOB: user.dob ? dayjs(user.dob) : null,
                role: user.role,
                status: user.status,
            });
        }
    }, [userData, form]);

    //handle when click save button
    const saveUser = async (values: any) => {
        if (!userId) return;

        try {
            const payload = {
                id: Number(userId),
                username: values.username,
                fullname: values.fullname,
                email: values.email,
                dob: values.DOB ? values.DOB.format('YYYY-MM-DD') : null,
                phone: values.phoneNumber,
                role: values.role,
                status: values.status,
            };

            const result = await updateUser(payload).unwrap(); // Gọi mutation và lấy kết quả
            openNotificationWithIcon('success', 'Success', result.message || 'User updated successfully!');
            form.setFieldsValue(payload);

        } catch (error: any) {
            console.error('Error updating user:', error);
            if (error.data?.fieldErrors?.length) {
                error.data.fieldErrors.forEach((err: any) => {
                    openNotificationWithIcon('error', 'Validation Error', `${err.message} (Field: ${err.property})`);
                });
            } else {
                openNotificationWithIcon('error', 'Update Failed', `Error: ${error.message || 'Unknown error'}`);
            }
        }
    };

    //Handle loading animation
    if (isLoading) {
        return (
            <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>
                <Spin size="large" />
            </div>
        );
    }

    //Handle notification error
    if (isError || !userData) {
        return (
            <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', color: 'red' }}>
                Error loading user data. Please try again later.
            </div>
        );
    }

    return (
        <>
            {contextHolder}

            <MyBreadcrumb
                items={[
                    { title: <Link href="/admin/management/user/user-detail">User Management</Link> },
                    { title: 'Edit User' },
                ]}
            />

            <Form
                {...formItemLayout}
                form={form}
                labelAlign="left"
                labelWrap
                style={{ maxWidth: 600 }}
                className="w-full mx-auto mt-5"
                onFinish={saveUser}
            >
                <Form.Item
                    label={<span>User Name</span>}
                    name="username"
                    rules={[{ required: true, message: 'User Name is required!' }]}
                >
                    <Input readOnly style={{ background: 'transparent', color: '#000' }} />
                </Form.Item>

                <Form.Item
                    label={<span>Full Name</span>}
                    name="fullname"
                    rules={[{ required: true, message: 'Full Name is required!' }]}
                >
                    <Input />
                </Form.Item>

                <Form.Item
                    label={<span>Email</span>}
                    name="email"
                    rules={[
                        { required: true, message: 'Email is required!' },
                        { type: 'email', message: 'Please enter a valid email address!' },
                    ]}
                >
                    <Input />
                </Form.Item>

                <Form.Item
                    label={<span>Phone No</span>}
                    name="phoneNumber"
                    rules={[
                        { required: true, message: 'Phone number is required!' },
                        { pattern: /^\+\d{1,4}[-\s]?\d{4,14}$/, message: 'Phone number is not correct format!' },
                    ]}
                >
                    <Input />
                </Form.Item>

                <Form.Item
                    label={<span>DOB</span>}
                    name="DOB"
                    rules={[{ required: true, message: 'Date of Birth is required!' }]}
                >
                    <DatePicker allowClear={false} style={{ width: '100%' }} />
                </Form.Item>

                <Form.Item
                    label={<span>Role</span>}
                    name="role"
                    rules={[{ required: true, message: 'Role is required!' }]}
                >
                    <Select
                        options={[
                            { label: 'Admin', value: 'Admin' },
                            { label: 'Parent', value: 'Parent' },
                            { label: 'School Owner', value: 'School Owner' },
                        ]}
                    />
                </Form.Item>

                <Form.Item
                    label={<span>Status</span>}
                    name="status"
                    rules={[{ required: true, message: 'Status is required!' }]}
                >
                    <Select
                        disabled
                        options={[
                            { label: 'Active', value: 'Active' },
                            { label: 'Inactive', value: 'Inactive' },
                        ]}
                    />
                </Form.Item>

                <Form.Item wrapperCol={{ offset: 6, span: 16 }}>
                    <Space>
                        <Button type="dashed" onClick={() => router.back()}>
                            Cancel
                        </Button>
                        <Button type="primary" htmlType="submit" loading={isUpdating}>
                            Save
                        </Button>
                    </Space>
                </Form.Item>
            </Form>
        </>
    );
};

export default UserDetail;